@inject NavigationManager Navigation

@using SiUpin.Shared.Modal.Auth

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <Login DialogIsOpen="true" DialogIsOpenStatus='() => { Navigation.NavigateTo("/"); }' />
                    }
                    else
                    {
                        <p>You are not authorized to access this page.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <div>Checking with the Authorization Service. Please wait...</div>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(NotFoundLayout)" />
        </NotFound>
    </Router>
</CascadingAuthenticationState>
<MatToastContainer />