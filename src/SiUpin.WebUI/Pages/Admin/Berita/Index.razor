@page "/admin/berita"
@attribute [Authorize]

@inject HttpClient Http
@inject IMatToaster Toaster

@using SiUpin.Pages.Admin.Berita

@using SiUpin.Shared.Beritas.Queries.GetAllBerita
@using SiUpin.Shared.Beritas.Common

@using SiUpin.Shared.Common.ApiEnvelopes

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        @if (OpenCreateDialog)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <Create DialogIsOpen="OpenCreateDialog" DialogIsOpenStatus="CreateDialogIsOpenStatus" OnSuccessSubmit="@(() => InvokeAsync(async () => { await GetData(); }))" />
            </div>
        }
        else if (OpenUpdateDialog)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <Update DialogIsOpen="OpenUpdateDialog" EntityID="@EntityID" DialogIsOpenStatus="UpdateIsOpenStatus"
                        OnSuccessSubmit="@(() => InvokeAsync(async () => { await GetData(); }))" />
            </div>
        }
        else
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <MatH4>Berita &nbsp; <MatFAB OnClick="() => { OpenCreateDialog = true; }" Icon="@MatIconNames.Add" /></MatH4>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                @if (IsLoading)
                {
                    <MatDialog @bind-IsOpen="IsLoading" CanBeClosed="false">
                        <MatDialog>Please Wait..</MatDialog>
                        <MatDialogContent>
                            <MatProgressBar Indeterminate="true" Closed="!IsLoading"></MatProgressBar>
                        </MatDialogContent>
                    </MatDialog>
                }
                else
                {
                    if (sortedData.Count() > 0)
                    {
                        <MatTable Items="sortedData" AllowSelection="true" UseSortHeaderRow="true" class="mat-elevation-z5 mt-1" FilterByColumnName="Title">
                            <MatTableHeader>
                                <MatSortHeaderRow SortChanged="SortData">
                                    <MatSortHeader SortId="1">No</MatSortHeader>
                                    <MatSortHeader SortId="2"><span style="width:300px;">Judul</span></MatSortHeader>
                                    <MatSortHeader SortId="3"><span style="width:100px;">Tanggal</span></MatSortHeader>
                                    <MatSortHeader SortId="4"><span style="width:300px;">Penulis</span></MatSortHeader>
                                    <MatSortHeader></MatSortHeader>
                                </MatSortHeaderRow>
                            </MatTableHeader>
                            <MatTableRow>
                                <td>@context.No</td>
                                <td>@context.Title</td>
                                <td>@context.Created.DateTime</td>
                                <td>@context.UserName</td>
                                <td class="text-center">
                                    <MatIconButton Icon="@MatIconNames.Edit" Style="color: mediumpurple;" @onclick="() => { OpenUpdateDialog = true; EntityID = context.BeritaID; }" />
                                    <MatIconButton Icon="@MatIconNames.Remove_circle" Style="color: orangered;" @onclick="() => { OpenDeleteDialog = true; EntityID = context.BeritaID; }" />
                                </td>
                            </MatTableRow>
                        </MatTable>
                    }
                }
            </div>
        }
    </div>
</div>

<Delete DialogIsOpen="OpenDeleteDialog" DialogIsOpenStatus="DeleteDialogIsOpenStatus" ID="@EntityID" OnSuccesSubmit="@(() => InvokeAsync(async () => { await GetData(); }))" />

@code
{
    private bool IsLoading = false;

    private ApiResponse<GetAllBeritaResponse> items;
    private BeritaDTO[] sortedData = null;

    public string EntityID { get; set; }

    public bool OpenCreateDialog { get; set; }
    public bool OpenUpdateDialog { get; set; }
    public bool OpenDeleteDialog { get; set; }

    private void CreateDialogIsOpenStatus(bool isOpened) => OpenCreateDialog = isOpened;
    private void UpdateIsOpenStatus(bool isOpened) => OpenUpdateDialog = isOpened;
    private void DeleteDialogIsOpenStatus(bool isOpened) => OpenDeleteDialog = isOpened;

    protected override async Task OnInitializedAsync() => await GetData();

    private async Task GetData()
    {
        IsLoading = true;

        items = await Http.GetFromJsonAsync<ApiResponse<GetAllBeritaResponse>>(Constants.URI.Berita.Base);

        if (items.Status.IsError)
        {
            Toaster.Add(items.Status.Message, MatToastType.Danger);

            IsLoading = false;

            StateHasChanged();
        }
        else
        {
            if (items.Result.Data != null)
            {
                if (items.Result.Data.Count == 0)
                {
                    Toaster.Add("Tidak ada Data", MatToastType.Danger);
                }

                SortData(null);

                IsLoading = false;

                StateHasChanged();
            }
        }
    }

    private void SortData(MatSortChangedEvent sort)
    {
        sortedData = items.Result.Data.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<BeritaDTO> comparison = null;
            switch (sort.SortId)
            {
                case "1":
                    comparison = (s1, s2) => s1.No.CompareTo(s2.No);
                    break;
                case "2":
                    comparison = (s1, s2) => string.Compare(s1.Title, s2.Title, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "3":
                    comparison = (s1, s2) => DateTime.Compare(s1.Created.DateTime, s2.Created.DateTime);
                    break;
                case "4":
                    comparison = (s1, s2) => string.Compare(s1.UserName, s2.UserName, StringComparison.InvariantCultureIgnoreCase);
                    break;
            }

            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedData, comparison);
                }
            }
        }
    }
}
