@inject HttpClient Http
@inject IMatToaster Toaster
@inject AuthenticationStateProvider _authenticationStateProvider

@namespace SiUpin.Pages.Admin.DataMaster.JenisKomoditi

@using SiUpin.Shared.JenisKomiditis.Commands.CreateJenisKomoditi
@using SiUpin.Shared.Common.ApiEnvelopes

@if (IsLoading)
{
    <MatDialog @bind-IsOpen="IsLoading" CanBeClosed="false">
        <MatDialog>Please Wait..</MatDialog>
        <MatDialogContent>
            <MatProgressBar Indeterminate="true" Closed="!IsLoading"></MatProgressBar>
        </MatDialogContent>
    </MatDialog>
}
else
{
    <MatDialog @bind-IsOpen="DialogIsOpen" CanBeClosed="false">
        <MatDialogTitle>
            Create
        </MatDialogTitle>
        <MatDialogContent>
            <EditForm EditContext="_editContext" OnSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="mat-layout-grid p-0">
                    <div class="mat-layout-grid-inner mt-0">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatTextField @bind-Value="Model.Name" Label="Nama" Required="true" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Name)" />
                            </MatCaption>
                        </div>
                    </div>
                </div>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="CancelClick">Cancel</MatButton>
            <MatButton Raised="true" OnClick="HandleSubmit">Submit</MatButton>
        </MatDialogActions>
    </MatDialog>
}

@code
{
    [Parameter]
    public bool DialogIsOpen { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DialogIsOpenStatus { get; set; }

    [Parameter]
    public EventCallback<bool> OnSuccessSubmit { get; set; }

    private bool IsLoading = false;
    public bool IsDisabledLoginButton { get; set; }

    public CreateJenisKomoditiRequest Model { get; set; } = new CreateJenisKomoditiRequest();
    public ApiResponse<CreateJenisKomoditiResponse> Response { get; set; }

    private EditContext _editContext;

    public void CancelClick()
    {
        DialogIsOpenStatus.InvokeAsync(false);
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
    }

    private async Task HandleSubmit()
    {
        if (_editContext.Validate())
        {
            IsLoading = true;

            var client = await Http.PostAsJsonAsync<CreateJenisKomoditiRequest>(Constants.URI.JenisKomoditi.Register, new CreateJenisKomoditiRequest
            {
                Name = Model.Name
            });

            Response = Task.FromResult(await client.Content.ReadFromJsonAsync<ApiResponse<CreateJenisKomoditiResponse>>()).Result;

            if (!Response.Status.IsError)
            {
                IsLoading = false;

                await DialogIsOpenStatus.InvokeAsync(false);

                await OnSuccessSubmit.InvokeAsync(true);

                StateHasChanged();
            }
            else
            {
                Toaster.Add(Response.Status.Message, MatToastType.Danger);

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
        {
            _editContext.AddDataAnnotationsValidation();
            Toaster.AddErrors(_editContext.GetValidationMessages());
        }
    }
}
