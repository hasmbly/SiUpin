@page "/admin/uph/mitra"

@inject HttpClient Http
@inject NavigationManager Navigation

@using SiUpin.Pages.Admin.Uph.UphMitra

@using SiUpin.Shared.UphMitras.Queries
@using SiUpin.Shared.UphMitras.Common
@using SiUpin.Shared.Common.ApiEnvelopes

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">

        @if (OpenCreateDialog)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <Create DialogIsOpen="OpenCreateDialog" DialogIsOpenStatus="CreateDialogIsOpenStatus" OnSuccessSubmit="@(() => InvokeAsync(async () => { await GetPaginateData(); }))" />
            </div>
        }
        else if (OpenUpdateDialog)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <Update DialogIsOpen="OpenUpdateDialog" EntityID="@EntityID" DialogIsOpenStatus="UpdateIsOpenStatus"
                        OnSuccessSubmit="@(() => InvokeAsync(async () => { await GetPaginateData(); }))" />
            </div>
        }
        else
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <MatH4>Data UPH Kemitraan &nbsp; <MatFAB OnClick="() => { OpenCreateDialog = true; }" Icon="@MatIconNames.Add" /></MatH4>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <MatTextField @bind-Value="@filterByName" HelperText="Filter Berdasarkan: Nama Uph" Label="Cari Uph" Icon="@MatIconNames.Search"></MatTextField>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                @if (IsLoading)
                {
                    <MatDialog @bind-IsOpen="IsLoading" CanBeClosed="false">
                        <MatDialog>Please Wait..</MatDialog>
                        <MatDialogContent>
                            <MatProgressBar Indeterminate="true" Closed="!IsLoading"></MatProgressBar>
                        </MatDialogContent>
                    </MatDialog>
                }
                else
                {
                    if (sortedData.Count() > 0)
                    {

                        <MatTable Items="sortedData" PageSize="pageSize" AllowSelection="true" SelectionChanged="SelectionChangedEvent" ShowPaging="false" UseSortHeaderRow="true" class="mat-elevation-z5 mt-1">
                            <MatTableHeader>
                                <MatSortHeaderRow SortChanged="SortData">
                                    <MatSortHeader SortId="1">No</MatSortHeader>
                                    <MatSortHeader SortId="2"><span style="width:100px">Nama UPH</span></MatSortHeader>
                                    <MatSortHeader>Jenis Usaha</MatSortHeader>
                                    <MatSortHeader>Nama Perusahaan</MatSortHeader>
                                    <MatSortHeader><span style="width:300px">Jenis Kemitraan</span></MatSortHeader>
                                    <MatSortHeader><span style="width:100px">Detail Kemitraan</span></MatSortHeader>
                                    <MatSortHeader class="text-center"><span style="width:20px"></span></MatSortHeader>
                                </MatSortHeaderRow>
                            </MatTableHeader>
                            <MatTableRow>
                                <td>@context.No</td>
                                <td>@context.Uph.Name</td>
                                <td>@context.jenis_usaha</td>
                                <td>@context.nama_perusahaan</td>
                                <td>@context.jenis_mitra</td>
                                <td>@context.detail_bahan @context.satuan_bahan</td>
                                <td class="text-center">
                                    <MatIconButton Icon="@MatIconNames.Edit" Style="color: mediumpurple;" @onclick="() => { OpenUpdateDialog = true; EntityID = context.UphMitraID; }" />
                                    <MatIconButton Icon="@MatIconNames.Remove_circle" Style="color: orangered;" @onclick="() => { OpenDeleteDialog = true; EntityID = context.UphMitraID; }" />
                                </td>
                            </MatTableRow>
                        </MatTable>
                    }
                }
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-align-top mat-layout-grid-cell-span-12">
                <MatPaginator Length="totalCount" PageSize="pageSize" Page="OnPage"></MatPaginator>
            </div>
        }
    </div>
</div>

<Delete DialogIsOpen="OpenDeleteDialog" DialogIsOpenStatus="DeleteDialogIsOpenStatus" ID="@EntityID" OnSuccesSubmit="@(() => InvokeAsync(async () => { await GetPaginateData(); }))" />

@code
{
    private bool IsLoading = false;

    private GetUphMitrasResponse items;
    private UphMitraDTO[] sortedData = null;

    private int pageSize = Constants.Pagination.PageSize;
    private int pageIndex = 0;
    private int totalCount = 0;

    private string _filterByName = "";

    public string filterByName
    {
        get => _filterByName;
        set
        {
            _filterByName = value;

            InvokeAsync(async () => { await GetPaginateData(pageSize, pageIndex + 1, _filterByName); });

            this.StateHasChanged();
        }
    }

    public string EntityID { get; set; }

    public bool OpenCreateDialog { get; set; }
    public bool OpenUpdateDialog { get; set; }
    public bool OpenDeleteDialog { get; set; }

    private void CreateDialogIsOpenStatus(bool isOpened) => OpenCreateDialog = isOpened;
    private void UpdateIsOpenStatus(bool isOpened) => OpenUpdateDialog = isOpened;
    private void DeleteDialogIsOpenStatus(bool isOpened) => OpenDeleteDialog = isOpened;

    protected override async Task OnInitializedAsync()
    {
        await GetPaginateData();
    }

    private void SelectionChangedEvent(object row)
    {
    }

    private async Task OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        pageIndex = e.PageIndex;

        await GetPaginateData(pageSize, pageIndex + 1);
    }

    private async Task GetPaginateData(int pageSize = Constants.Pagination.PageSize, int pageNumber = Constants.Pagination.PageNumber, string filterName = null)
    {
        IsLoading = true;

        var client = await Http.PostAsJsonAsync<GetUphMitrasRequest>(Constants.URI.UphMitra.Paginate, new GetUphMitrasRequest
        {
            PageSize = pageSize,
            PageNumber = pageNumber,
            FilterByName = filterName ?? ""
        });

        items = Task.FromResult(await client.Content.ReadFromJsonAsync<ApiResponse<GetUphMitrasResponse>>()).Result.Result;

        if (items.Data.Count() > 0)
        {
            totalCount = items.Pagination.TotalCount;

            SortData(null);

            IsLoading = false;

            StateHasChanged();
        }
        else
        {
            totalCount = items.Pagination.TotalCount;

            SortData(null);

            IsLoading = false;

            StateHasChanged();
        }
    }

    private void SortData(MatSortChangedEvent sort)
    {
        sortedData = items.Data.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<UphMitraDTO> comparison = null;
            switch (sort.SortId)
            {
                case "1":
                    comparison = (s1, s2) => s1.No.CompareTo(s2.No);
                    break;
                case "2":
                    comparison = (s1, s2) => s1.Uph.Name.CompareTo(s2.Uph.Name);
                    break;
            }

            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedData, comparison);
                }
            }
        }
    }
}
