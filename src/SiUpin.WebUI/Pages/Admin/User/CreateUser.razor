@inject HttpClient Http
@inject IMatToaster Toaster
@inject AuthenticationStateProvider _authenticationStateProvider

@namespace SiUpin.Pages.Admin.User

@using SiUpin.Shared.Users.Commands.CreateUser
@using SiUpin.Shared.Common.ApiEnvelopes

@using SiUpin.Shared.Roles.Queries.GetRoles
@using SiUpin.Shared.Provinsis.Queries.GetProvinsis
@using SiUpin.Shared.Kotas.Queries.GetKotasByProvinsiID
@using SiUpin.Shared.Kecamatans.Queries.GetKecamatansByKotaID
@using SiUpin.Shared.Kelurahans.Queries.GetKelurahansByKecamatanID

@if (IsLoading)
{
    <MatDialog @bind-IsOpen="IsLoading" CanBeClosed="false">
        <MatDialog>Please Wait..</MatDialog>
        <MatDialogContent>
            <MatProgressBar Indeterminate="true" Closed="!IsLoading"></MatProgressBar>
        </MatDialogContent>
    </MatDialog>
}
else
{
    <MatDialog @bind-IsOpen="DialogIsOpen" CanBeClosed="false">
        <MatDialogTitle>
            Create
        </MatDialogTitle>
        <MatDialogContent>
            <EditForm EditContext="_editContext" OnSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="mat-layout-grid p-0">
                    <div class="mat-layout-grid-inner mt-0">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Username" Label="Username" Required="true" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Username)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Email" Label="Email" Required="true" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Email)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Fullname" Label="Full Name" Required="true" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Fullname)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Password" Label="Password" Type="password" Required="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Password)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.NIP" Label="NIP" Type="number" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.NIP)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Jabatan" Label="Jabatan" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Jabatan)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Instansi" Label="Instansi" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Instansi)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatTextField @bind-Value="Model.Telepon" Label="Telepon" Type="number" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Telepon)" />
                            </MatCaption>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatSelect @bind-Value="SelectRole" Label="Level">
                                <MatOption TValue="string" Value="@(null)"></MatOption>
                                @if (Roles.Count() > 0)
                                    {
                                        foreach (var item in Roles)
                                        {
                                        <MatOption TValue="string" Value="@(item.RoleID)">@item.Name</MatOption>
                                        }
                                    }
                            </MatSelect>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatSelect @bind-Value="SelectProvinsi" Label="Provinsi">
                                <MatOption TValue="string" Value="@(null)"></MatOption>
                                @if (Provinsis.Count() > 0)
                                    {
                                        foreach (var item in Provinsis)
                                        {
                                        <MatOption TValue="string" Value="@(item.ProvinsiID)">@item.Name</MatOption>
                                        }
                                    }
                            </MatSelect>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatSelect @bind-Value="SelectKota" Label="Kota">
                                <MatOption TValue="string" Value="@(null)"></MatOption>
                                @if (Kotas.Count() > 0)
                                    {
                                        foreach (var item in Kotas)
                                        {
                                        <MatOption TValue="string" Value="@(item.KotaID)">@item.Name</MatOption>
                                        }
                                    }
                            </MatSelect>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatSelect @bind-Value="SelectKecamatan" Label="Kecamatan">
                                <MatOption TValue="string" Value="@(null)"></MatOption>
                                @if (Kecamatans.Count() > 0)
                                    {
                                        foreach (var item in Kecamatans)
                                        {
                                        <MatOption TValue="string" Value="@(item.KecamatanID)">@item.Name</MatOption>
                                        }
                                    }
                            </MatSelect>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                            <MatSelect @bind-Value="SelectKelurahan" Label="Kelurahan">
                                <MatOption TValue="string" Value="@(null)"></MatOption>
                                @if (Kelurahans.Count() > 0)
                                    {
                                        foreach (var item in Kelurahans)
                                        {
                                        <MatOption TValue="string" Value="@(item.KelurahanID)">@item.Name</MatOption>
                                        }
                                    }
                            </MatSelect>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatTextField @bind-Value="Model.Alamat" Label="Alamat" TextArea="true" FullWidth="true" />
                            <MatCaption Class="mt-1">
                                <ValidationMessage For="@(() => Model.Alamat)" />
                            </MatCaption>
                        </div>
                    </div>
                </div>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="CancelClick">Cancel</MatButton>
            <MatButton Raised="true" OnClick="HandleSubmit">Submit</MatButton>
        </MatDialogActions>
    </MatDialog>
}

@code
{
    [Parameter]
    public bool DialogIsOpen { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DialogIsOpenStatus { get; set; }

    [Parameter]
    public EventCallback<bool> OnSuccessSubmit { get; set; }

    private bool IsLoading = false;
    public bool IsDisabledLoginButton { get; set; }

    public CreateUserRequest Model { get; set; } = new CreateUserRequest();
    public ApiResponse<CreateUserResponse> Response { get; set; }

    private EditContext _editContext;

    public string SelectRole
    {
        get => Model.RoleID;
        set => Model.RoleID = value;
    }

    public string SelectProvinsi
    {
        get => Model.ProvinsiID;
        set
        {
            Model.ProvinsiID = value;
            InvokeAsync(async () =>
            {
                await GetKotasByProvinsiID(value);
                StateHasChanged();
            });
        }
    }

    public string SelectKota
    {
        get => Model.KotaID;
        set
        {
            Model.KotaID = value;
            InvokeAsync(async () =>
            {
                await GetKecamatansByKotaID(value);
                StateHasChanged();
            });
        }
    }

    public string SelectKecamatan
    {
        get => Model.KecamatanID;
        set
        {
            Model.KecamatanID = value;
            InvokeAsync(async () =>
            {
                await GetKelurahansByKecamatanID(value);
                StateHasChanged();
            });
        }
    }

    public string SelectKelurahan
    {
        get => Model.KelurahanID;
        set => Model.KelurahanID = value;
    }

    public IList<RoleDTO> Roles { get; set; } = new List<RoleDTO>();
    public IList<ProvinsiDTO> Provinsis { get; set; } = new List<ProvinsiDTO>();
    public IList<KotaDTO> Kotas { get; set; } = new List<KotaDTO>();
    public IList<KecamatanDTO> Kecamatans { get; set; } = new List<KecamatanDTO>();
    public IList<KelurahanDTO> Kelurahans { get; set; } = new List<KelurahanDTO>();

    public void CancelClick()
    {
        DialogIsOpenStatus.InvokeAsync(false);
    }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Model);

        await GetRoles();
        await GetProvinsis();

        StateHasChanged();
    }

    private async Task GetRoles()
        => Roles = Task.FromResult(await Http.GetFromJsonAsync<ApiResponse<GetRolesResponse>>(Constants.URI.User.GetRoles)).Result.Result.Data.ToList();
    private async Task GetProvinsis()
        => Provinsis = Task.FromResult(await Http.GetFromJsonAsync<ApiResponse<GetProvinsisResponse>>(Constants.URI.Region.GetProvinsis)).Result.Result.Data.ToList();
    private async Task GetKotasByProvinsiID(string ID)
        => Kotas = Task.FromResult(await Http.GetFromJsonAsync<ApiResponse<GetKotasByProvinsiIDResponse>>($"{Constants.URI.Region.GetKotasByProvinsiID}{ID}")).Result.Result.Data.ToList();
    private async Task GetKecamatansByKotaID(string ID)
        => Kecamatans = Task.FromResult(await Http.GetFromJsonAsync<ApiResponse<GetKecamatansByKotaIDResponse>>($"{Constants.URI.Region.GetKecamatansByKotaID}{ID}")).Result.Result.Data.ToList();
    private async Task GetKelurahansByKecamatanID(string ID)
        => Kelurahans = Task.FromResult(await Http.GetFromJsonAsync<ApiResponse<GetKelurahansByKecamatanIDResponse>>($"{Constants.URI.Region.GetKelurahansByKecamatanID}{ID}")).Result.Result.Data.ToList();

    private async Task HandleSubmit()
    {
        if (_editContext.Validate())
        {
            IsLoading = true;

            var client = await Http.PostAsJsonAsync<CreateUserRequest>(Constants.URI.User.Register, new CreateUserRequest
            {
                Username = Model.Username,
                Password = Model.Password,

                Alamat = Model.Alamat,
                Email = Model.Email,
                Fullname = Model.Fullname,
                Instansi = Model.Instansi,
                Jabatan = Model.Jabatan,
                NIP = Model.NIP,
                Telepon = Model.Telepon,

                RoleID = Model.RoleID,
                ProvinsiID = Model.ProvinsiID,
                KotaID = Model.KotaID,
                KecamatanID = Model.KecamatanID,
                KelurahanID = Model.KelurahanID
            });

            Response = Task.FromResult(await client.Content.ReadFromJsonAsync<ApiResponse<CreateUserResponse>>()).Result;

            if (!Response.Status.IsError)
            {
                IsLoading = false;

                await DialogIsOpenStatus.InvokeAsync(false);

                await OnSuccessSubmit.InvokeAsync(true);

                StateHasChanged();
            }
            else
            {
                Toaster.Add(Response.Status.Message, MatToastType.Danger);

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
        {
            _editContext.AddDataAnnotationsValidation();
            Toaster.AddErrors(_editContext.GetValidationMessages());
        }
    }
}
